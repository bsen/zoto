generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id             String    @id @default(uuid())
  username       String    @unique
  password       String
  permissions    Json 
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  name           String
  phone          String
  profilePicture String?
  addresses      Address[]
  bookings       Booking[]
  reviews        Review[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Address {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  latitude  Float?
  longitude Float?
  isDefault Boolean   @default(false)
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  icon      String?
  services  Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Service {
  id              String    @id @default(uuid())
  name            String
  description     String
  price           Float
  discountedPrice Float?
  images          String[]
  categoryId      String
  category        Category  @relation(fields: [categoryId], references: [id])
  duration        Int?      
  bookings        Booking[]
  reviews         Review[]
  status          Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Booking {
  id            String        @id @default(uuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  serviceId     String
  service       Service       @relation(fields: [serviceId], references: [id])
  addressId     String
  address       Address       @relation(fields: [addressId], references: [id])
  name          String        
  phone         String        
  datetime      DateTime
  status        BookingStatus @default(PENDING)
  totalAmount   Float
  paymentStatus PaymentStatus @default(PENDING)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Promotion {
  id                 String   @id @default(uuid())
  code               String   @unique
  description        String
  discountPercentage Float
  maxDiscount        Float?
  startDate          DateTime
  endDate            DateTime
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}